buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.31.2'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "app.zxtune"
        minSdkVersion 14
        targetSdkVersion 28
        //supported languages
        resConfigs "en", "de", "ru", "es", "cs", "zh", "ja"
        //supported densities for vector drawables rasterization
        vectorDrawables.generatedDensities  "mdpi", "hdpi", "xhdpi", "xxhdpi"
    }

    dataBinding {
        enabled true
    }

    dexOptions {
        preDexLibraries false
    }
}

configurations {
    developImplementation {}
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.appcompat:appcompat-resources:1.1.0'
    implementation 'androidx.media:media:1.0.0'
    implementation 'androidx.annotation:annotation:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.recyclerview:recyclerview-selection:1.1.0-rc01'
    implementation('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
        transitive = true
    }
    implementation('com.crashlytics.sdk.android:crashlytics-ndk:2.1.1@aar') {
        transitive = true
    }
    implementation 'org.jsoup:jsoup:1.13.1'
    implementation 'com.github.anrwatchdog:anrwatchdog:1.4.0'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation "androidx.room:room-runtime:2.2.5"
    annotationProcessor "androidx.room:room-compiler:2.2.5"

    developImplementation 'com.squareup.leakcanary:leakcanary-android:2.3'
}

apply from: "${treeRoot}/make/android/android.gradle"
apply from: "${treeRoot}/make/android/nativelibs.gradle"

// Testing related
android {
    defaultConfig {
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    testOptions.unitTests.includeAndroidResources = true
}

dependencies {
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:4.3'
}

android {
    defaultConfig {
        manifestPlaceholders += [
            modarchiveKey: localProperties.getProperty("key.modarchive"),
            crashlyticsKey: localProperties.getProperty("key.crashlytics")
        ]

        def cdnRoot = localProperties.getProperty('cdn.root')
        if (cdnRoot != null) {
            buildConfigField("String", "CDN_ROOT", "\"${cdnRoot}\"")
        }
        def apiRoot = localProperties.getProperty('api.root')
        if (apiRoot != null) {
            buildConfigField("String", "API_ROOT", "\"${apiRoot}\"")
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

//http://stackoverflow.com/questions/40134153/crashlytics-ndk-symbol-building-from-command-line
//http://stackoverflow.com/questions/33735332/crashlytics-ndk-multi-androidndkout-path-support
android {
    ext.crashlyticsTmpDir = "${project.buildDir}/crashlytics"
    ext.crashlyticsNdkOut = "${crashlyticsTmpDir}/debug"
    ext.crashlyticsNdkLibsOut = "${crashlyticsTmpDir}/release"

    //crashlytics tasks should be performed in the same execution due to apk rebuild
    task publicBuildWithCrashlytics() {}
    
    applicationVariants.all { variant ->
        def variantName = variant.name.capitalize()
        def prepareDebugSymbols = task("prepareDebugSymbols${variantName}", dependsOn: "nativeLibsDebugSymbols${variantName}") {
            def libsDir = variant.ndkCompile.soFolder
            def objsDir = variant.ndkCompile.objFolder
            doFirst {
                fileTree(dir: objsDir, include: '**/*.pdb').each { file ->
                    def target = file.getAbsolutePath().replace('so.pdb', 'so')
                    file.renameTo(target)
                }
            }
            doLast {
                new File(crashlyticsTmpDir).deleteDir()
                copy {
                    from objsDir
                    into crashlyticsNdkOut
                }
                copy {
                    from libsDir
                    into crashlyticsNdkLibsOut
                }
            }
        }
        // replace assemble dependency by processManifest to avoid unneeded .apk creating
        def assemble = tasks.getByName("assemble${variantName}")
        def genSyms = tasks.getByName("crashlyticsGenerateSymbols${variantName}")
        genSyms.dependsOn += [prepareDebugSymbols, "process${variantName}Manifest"]
        genSyms.dependsOn -= assemble

        if (variant.buildType.name == "release") {
            publicBuildWithCrashlytics.dependsOn += ["publicBuild${variantName}", "crashlyticsUploadSymbols${variantName}"]
        }
    }
    publicBuildWithCrashlytics.dependsOn += 'publishPdb'

}

crashlytics {
    enableNdk true
    androidNdkOut android.crashlyticsNdkOut
    androidNdkLibsOut android.crashlyticsNdkLibsOut
}
