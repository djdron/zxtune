/*
 * Native libs basic functionality
 *
 */

def getListProperty(name, defvalue) {
  def prop = localProperties.getProperty(name, defvalue)
  return prop.split();
}

android {
    flavorDimensions "packaging"

    splits.abi {
        reset()
    }

    // Splits config is global and cannot be per-variant
    // so, it conflicts with another flavors due to non-empty ndk.abiFilters
    productFlavors {
        // Single APK
        fat {
            dimension "packaging"
            versionNameSuffix "-fat"
            ndk.abiFilters getListProperty("flavors.fat.abifilters", "")
        }

        // Single AAB
        thin {
            dimension "packaging"
            versionNameSuffix "-thin"
            ndk.abiFilters getListProperty("flavors.thin.abifilters", "")
        }

        // Several APKs
        // Should not be combined with another flavors (configs)
        splitted {
            dimension "packaging"
            versionNameSuffix "-splitted"
            ndk.abiFilters getListProperty("flavors.splitted.abifilters", "")
        }
    }

    variantFilter { variant ->
        def flavor = variant.getFlavors().get(0)
        def abis = flavor.ndk.abiFilters
        if (variant.name =~ /splitted/) {
            if (!abis.isEmpty()) {
                splits.abi.enable true
                splits.abi.include((String[])abis.toArray())
                abis.clear()
            }
            if (splits.abi.enable) {
                return
            }
        }
        if (abis.isEmpty()) {
            setIgnore(true)
            println 'Disable ' + variant.name
        }
    }
}

def callMake(cmdline) {
    def fullCmd = "make platform=android ${cmdline}"
    println fullCmd
    def proc = fullCmd.execute()
    proc.consumeProcessOutput(System.out, System.out)
    assert 0 == proc.waitFor()
}

def getABIs(variant) {
   def abis = variant.outputs*.getFilter("ABI")
   return abis.size() && abis[0] ? abis : variant.ndkCompile.abiFilters
}

android {
    applicationVariants.all { variant ->
        def suffix = variant.name.capitalize()
        tasks.getByName("compile${suffix}Ndk").enabled = false
        def nativeLibs = task("nativeLibs${suffix}", group: "Native") {
            def libsDir = variant.ndkCompile.soFolder
            def abis = getABIs(variant)
            //optimize incremental builds - assume existing soFolder means that all libs are ready
            outputs.dir libsDir
            doLast {
                def cpuCount = Runtime.runtime.availableProcessors()
                def jniDir = variant.ndkCompile.source.first().parent
                abis.each { arch ->
                    def baseCmd = "arch=${arch} -C ${jniDir}"
                    callMake("${baseCmd} -j ${cpuCount}")
                    def dstDir = file("${libsDir}/${arch}")
                    dstDir.mkdirs()
                    callMake("${baseCmd} DESTDIR=${dstDir} install")
                }
            }
        }
        tasks.getByName("package${suffix}").dependsOn.add(nativeLibs)
        tasks.getByName("merge${suffix}JniLibFolders").dependsOn.add(nativeLibs)

        task("nativeLibsDebugSymbols${suffix}", group: "Native", dependsOn: nativeLibs) {
            def objsDir = variant.ndkCompile.objFolder
            def abis = getABIs(variant)
            //optimize incremental builds - assume existing objFolder means that all libs are ready
            outputs.dir objsDir
            doLast {
                def jniDir = variant.ndkCompile.source.first().parent
                abis.each { arch ->
                    def baseCmd = "arch=${arch} -C ${jniDir}"
                    def objDir = file("${objsDir}/${arch}")
                    objDir.mkdirs()
                    callMake("${baseCmd} DESTDIR=${objDir} install_debug")
                }
            }
        }
    }
}

// publish
android {
    ext.publicBuildsDir = "${treeRoot}/Builds/${defaultConfig.versionName}/android"

    task publicBuild(group: "Publish") {}
    
    applicationVariants.all { variant ->
        def suffix = variant.name.capitalize()
        def baseName = "${project.name}_${defaultConfig.versionName}"
        def publishApk = task("publishApk${suffix}", group: "Publish", dependsOn: ["assemble${suffix}"] ) << {
            variant.outputs.each { out ->
              copy {
                def abi = out.getFilter("ABI")
                from out.outputFile
                into publicBuildsDir
                rename ".*\\.apk", "${baseName}${abi ? '_' + abi : ''}.apk"
              }
            }
        }

        def publishAab = task("publishAab${suffix}", group: "Publish", dependsOn: ["bundle${suffix}"]) << {
          variant.outputs.each { out -> 
            //TODO: find more suitable way to get bundle path
            def bundleDir = tasks["package${suffix}Bundle"].outputs.files.singleFile
            copy {
             from bundleDir
             into publicBuildsDir
             rename ".*\\.aab", "${baseName}.aab"
            }
          }
        }

        def publicBuildVariant = task("publicBuild${suffix}", group: "Publish") {
            if (variant.getBuildType().isMinifyEnabled()) {
                publishApk.doLast {
                    copy {
                        from variant.mappingFile
                        into publicBuildsDir
                        rename ".*", "${baseName}-mapping.txt"
                    }
                }
            }

            if (variant.buildType.name == "release") {
               if (variant.name =~ /thin/) {
                  dependsOn publishAab
               } else {
                  dependsOn publishApk
               }
            }
        }

        publicBuild.dependsOn publicBuildVariant
    }

    task publishPdb(group: "Publish", type: Tar) {
        compression "BZIP2"
        archiveName "${project.name}.tar.bz2"
        destinationDir new File("${publicBuildsDir}")
        from ("${treeRoot}/bin") {
            include "android_*/*/*.pdb"
        }
    }

    publicBuild.dependsOn publishPdb
}
